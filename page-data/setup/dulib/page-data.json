{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/setup/dulib/","result":{"data":{"mdx":{"id":"aed5f656-bcc7-5da6-a4a5-b6190b51ef06","excerpt":"DUlib wraps PyTorch.  It was developed by students and faculty at the DL@DU\nProject.  Originally, it provided a library for training vanilla models afterâ€¦","fields":{"slug":"/setup/dulib/"},"frontmatter":{"title":"DUlib","description":null,"image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"DUlib\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"DUlib wraps PyTorch.  It was developed by students and faculty at the DL@DU\\nProject.  Originally, it provided a library for training vanilla models after\\nautomatically wrangling data onto any GPU(s) that may be present. Recent\\nversions include a framework with which researchers can quickly experiment with\\nvarious flavors of networks.\"), mdx(\"h2\", {\n    \"id\": \"obtaining-dulib\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#obtaining-dulib\",\n    \"aria-label\": \"obtaining dulib permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Obtaining DUlib\"), mdx(\"p\", null, \"The latest release lives at\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pypi.org/project/DUlib/\"\n  }), \"pypi.org/project/DUlib\"), \".  The upstream\\nrepo \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/sj-simmons/DUlib\"\n  }), \"github.com/sj-simmons/DUlib\"), \"\\nhouses the current development release.\"), mdx(\"p\", null, \"Current (Fall '20) students: please install the development release.\\n\", \"\\u2605\"), mdx(\"p\", null, \"Depending on your development environment, you may need to export some\\nsystem variables.  See the installation notes at the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/sj-simmons/DUlib\"\n  }), \"upstream repo\"), \"\\nand ask Simmons for help if you get stuck.\"), mdx(\"h2\", {\n    \"id\": \"running-experiments-from-the-commandline\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#running-experiments-from-the-commandline\",\n    \"aria-label\": \"running experiments from the commandline permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Running experiments from the commandline\"), mdx(\"p\", null, \"Typically, we want to\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tune our models train, validate, and test our models with various\\nchoices of training hyper-parameters;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"or, depending on our problem, we may even want to experiment with\\ntweaked or wholly different model architectures.\")), mdx(\"p\", null, \"Any ML framework or library facilitates your fine-tuning your training\\nprocess.  DUlib is, in addition, designed to assist the search for\\na preferred architecture for your problem.\"), mdx(\"p\", null, \"In any case, once you have your code working, you no doubt want to\\nrun some experiments.  There are several ways to do this. The following\\nare example solutions that we use at the DL@DU Project.\"), mdx(\"p\", null, \"Suppose that you have a program named \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"myprogram.py\"), \" that accepts\\nvarious commandline arguments. Maybe you run your program like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-console\"\n  }), \"python3 myprogram.py -bs 20 -epochs 10 -lr .05 -mo .95\\n\")), mdx(\"h1\", {\n    \"id\": \"simmons-dual-gpu-arch-machine\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#simmons-dual-gpu-arch-machine\",\n    \"aria-label\": \"simmons dual gpu arch machine permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Simmons' dual-GPU Arch machine\"), mdx(\"p\", null, \"Many of the advanced DL@DU students have accounts on the ArchLinux machine\\nin Simmons' office (and they can rdp into that machine over a vpn).\"), mdx(\"p\", null, \"Scenario 1:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Suppose that you have a program that runs on a single GPU.  Since there are\\n2 GPUs in the arch machines, you want to run 2 instances of your program in\\nparallel, one on each GPU. To keep things simple, suppose you just want\\nto tweak a few the learning parameters.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Method 1:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-console\"\n  }), \"parallel -j2 eval CUDA_VISIBLE_DEVICES='$(( {%} -1 ))' python3 myprogram.py -bs 20 -epochs 10 -lr ::: .05 .01 -mo ::: .95 .98\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The command above is equivalent to running (simultaneously) both of the following commands:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-console\"\n  }), \"CUDA_VISIBLE_DEVICES=0 python3 myprogram.py -bs 20 -epochs 10 -lr .05 -mo .95\\nCUDA_VISIBLE_DEVICES=1 python3 myprogram.py -bs 20 -epochs 10 -lr .05 .01 -mo ::: .95 .98\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Method 2 (this is just a different, but equivalent, way to organize Method 1):\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create a file named say \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"params\"), \" with say these lines:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-txt\"\n  }), \"-bs 20 -epochs 10 -lr .05  -mo .95\\n-bs 20 -epochs 10 -lr .01  -mo .98\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Then run\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-console\"\n  }), \"parallel -j2 eval CUDA_VISIBLE_DEVICES='$(( {%} -1 ))' python3 myprogram.py {} :::: params\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Obtaining DUlib"},{"depth":2,"value":"Running experiments from the commandline"},{"depth":1,"value":"Simmons' dual-GPU Arch machine"}]}},"pageContext":{"slug":"/setup/dulib/","prev":{"label":"Cloud GPUs","link":"/setup/cloud"},"next":{"label":"Intro and access ","link":"/content/access"},"githubEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/master/examples/gatsby-theme-docs/src/docs/setup/dulib.mdx"}},"staticQueryHashes":["1954253342","2360221584","2501019404","2679457992"]}