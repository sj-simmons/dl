{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/setup/cloud/","result":{"data":{"mdx":{"id":"d8492c6b-fe86-5f4f-9436-dd0b768e81a9","excerpt":"Google currently provides free GPU/TPUs for research, as does Kaggle.\nThese use Jupyter notebooks. You may have heard Simmons say that he is, in general, not aâ€¦","fields":{"slug":"/setup/cloud/"},"frontmatter":{"title":"GPU servers","description":null,"image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"GPU servers\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Google currently provides free GPU/TPUs for research, as does Kaggle.\\nThese use Jupyter notebooks.\"), mdx(\"p\", null, \"You may have heard Simmons say that he is, in general, not a huge fan\\nof Jupyter notebooks (formerly, IPython notebooks); however, they make\\nsense in the cloud if for no other reason than that they seemlessly\\nintegrate graphical output.\"), mdx(\"p\", null, \"Of course, more cloud solutions are available; AWS, GCP, etc. Those\\ntypically are not free but Simmons has a bunch of mini-grants for\\nvarious clouds providers.\"), mdx(\"h2\", {\n    \"id\": \"colab\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#colab\",\n    \"aria-label\": \"colab permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Colab\"), mdx(\"p\", null, \"This section comprises an example for how to use a Jupyter notebook in\\nthe cloud to get your hands on a free GPU or TPU.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Go to \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://colab.research.google.com\"\n  }), \"colab.research.google.com\"), \",\\nsign in (or create an account), and create a new Python 3 notebook.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"click on \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Runtime\"), \" and select \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"change runtime type\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"under runtime type select \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"GPU\"))), mdx(\"p\", null, \"We now want to upload a program to a notebook and run it.\\nScroll through this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/dl/766af57dc855fd73dd05fb0c8bfe43f7/dulib_test0.ipynb\"\n  }), \"notebook\"), \"'s session that\\nSimmons ran on Colab:\"), mdx(\"p\", null, mdx(\"iframe\", {\n    width: \"100%\",\n    height: \"400\",\n    src: \"https://sj-simmons.github.io/dl/dulib_test0\",\n    title: \"example notebook\",\n    frameBorder: \"0\",\n    style: {\n      \"overflow_x\": \"hidden\",\n      \"overflow_y\": \"hidden\"\n    }\n  }, \"The \", mdx(\"a\", {\n    href: \"./dulib_test0.asciidoc\"\n  }, \"asciidoc version\"), \"and \", mdx(\"a\", {\n    href: \"./dulib_test0_files/dulib_test0_13_1.png\"\n  }, \"png image\"), \".\"), \"View the contents of the Iframe above \", mdx(\"a\", {\n    href: \"https://sj-simmons.github.io/dl/dulib_test0.html\",\n    target: \"_blank\"\n  }, \"in a separate window\"), \".\"), mdx(\"p\", null, \"Here is the Python program that was uploaded and executed in the notebook:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"title=mnist\",\n    \"title\": \"mnist\"\n  }), \"#!/usr/bin/env python3\\nimport torch\\nimport torch.nn as nn\\n#import torch.optim as optim\\nfrom torchvision import datasets\\nfrom torch.utils.data import DataLoader\\nimport du.lib as dulib\\nimport du.utils\\nfrom du.conv.models import ConvFFNet\\n\\n# process commandline arguments\\nparser = du.utils.stand_args(\\n    desc=du.utils._markup(\\\"Classify MNIST data. In the presence of a gpu try\\\\\\n    running this like: `mnist -sm 1.0` \\\"), lr=0.001, mo=0.92, bs=20, epochs=15,\\n    prop=5/6, gpu=(-1,), graph=0, widths=(10,), channels=(1,16), verb=2,\\n    small=1, cm=False, print_lines=(7,8))\\nargs = parser.parse_args()\\n\\n# get the mnist data\\ndl = DataLoader(datasets.MNIST('~/data/mnist', train=True, download=True,))\\nfeatures = dl.dataset.data.to(dtype=torch.float32)\\ntargets = dl.dataset.targets.to(dtype=torch.long)\\n\\n# use only a (randomly chosen) percentage of the data\\nif args.small < 1:\\n  features, _ , targets, _ = dulib.coh_split(args.small, features, targets)\\n\\n# it's standard practice to train on first 50K digits and test on last 10K\\nif args.prop == 5/6:\\n  train_feats, test_feats, train_targs, test_targs =\\\\\\n      dulib.coh_split(5/6, features, targets, randomize=False)\\nelse:\\n  train_feats, test_feats, train_targs, test_targs =\\\\\\n      dulib.coh_split(args.prop, features, targets)\\n\\n# center and normalize training data\\ntrain_feats, train_means = dulib.center(train_feats)\\ntrain_feats, train_stdevs = dulib.normalize(train_feats)\\n\\n# if test_data, center/normalize those w/r to means/stdevs of train data\\nif args.prop < 1:\\n  test_feats, _ = dulib.center(test_feats, train_means)\\n  test_feats, _ = dulib.normalize(test_feats, train_stdevs)\\n\\nprint('training on {} of {} examples'.format(len(train_feats),len(features)))\\n\\nmodel = ConvFFNet(\\n    in_size = (28, 28),\\n    n_out = 10,\\n    channels = args.channels,\\n    widths = args.widths)\\n\\nmodel = dulib.train(\\n    model = model,\\n    crit = nn.NLLLoss(),\\n    train_data = (train_feats, train_targs),\\n    test_data = (test_feats, test_targs) if args.prop < 1 else None,\\n    #learn_params = optim.SGD(model.parameters(),lr=args.lr,momentum=args.mo),\\n    args = args)\\n\\nprint('{:.2f}% correct on training data'.format(100*dulib.confusion_matrix(\\n    (model,train_feats), train_targs,torch.arange(10))))\\n\\nif args.prop < 1:\\n  print('On test data:')\\n  print('{:.2f}% correct, overall.'.format(100*dulib.confusion_matrix(\\n      (model,test_feats), test_targs,torch.arange(10),show = args.cm)))\\n\")), mdx(\"p\", null, \"Notes on performance:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"There are two runs of the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"mnist\"), \" in the Colab notebook above: one that\\nincludes validation (and graphing) on test data and one that ignores test\\ndata.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"On Colab, the training time reported during the former run is just over 3\\nminutes; the later is just over 1 minute. The same two runs on the Arch\\nmachine in Simmons' office (so on a 1080) take, respectively, about 102 and\\n40 seconds. There must be some overhead on the Colab machines that is not\\npresent on the Arch machine (since a Tesla T4 is faster, in every way, than a\\n1080).\"))), mdx(\"p\", null, \"References:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Colab \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://colab.research.google.com/notebooks/io.ipynb\"\n  }), \"notebook\"), \"\\ndescribing loading and saving files from external sources like your machine\\nto the Colab filesystem.\")), mdx(\"h2\", {\n    \"id\": \"kaggle\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#kaggle\",\n    \"aria-label\": \"kaggle permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Kaggle\"), mdx(\"p\", null, \"Setup:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create an account at \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"kaggle.com\"\n  }), \"kaggle.com\"), \", sign in, and go to \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Notebooks\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click on the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Your Work\"), \" tab and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Create New Notebook\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Select the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"type\"), \" to be \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Notebook\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Under \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Advanced Settings\"), \", put \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"GPU\"), \" or \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"TPU\"), \" under \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"accelerator\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"create\"), \".\")), mdx(\"p\", null, \"Choosing \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Notebook\"), \" above creates a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Jupyter Notebook\"), \" environment\\nin which you can see the matplotlib graphics that DUlib optionally\\nuses. If you don't need graphics, put \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Script\"), \" for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"type\"), \".\"), mdx(\"p\", null, \"To install DUlib to your Kaggle session:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click on \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Console\"), \" in the bottom left and enter the following (or\\nits equivalent with your desired version number):\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"python3 -m pip install git+https://github.com/sj-simmons/DUlib.git@v0.9  --user\\n\")))), mdx(\"p\", null, \"To make sure everything is working, consider cutting and pasting\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Simmons is working on finishing this (help him if you like)\")), mdx(\"h2\", {\n    \"id\": \"simmons-machine\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#simmons-machine\",\n    \"aria-label\": \"simmons machine permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Simmons' machine\"), mdx(\"p\", null, \"This is technically not a cloud solution but if/when your project warrants\\nit, you may have an account on the machine in Simmons' office (which holds\\ndual 1080's).\"), mdx(\"p\", null, \"First, contact Simmons so that he can create your account on the ArchLinux box.\\nThen follow the setup details and access instructions on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.github.com/sj-simmons/deep-learning/blob/master/setup-docs/arch_box.md\"\n  }), \"this\\npage\"), \"\\nof the DL@DU Project's Github repo.\"), mdx(\"h2\", {\n    \"id\": \"resources\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#resources\",\n    \"aria-label\": \"resources permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://pytorch.org/get-started/cloud-partners/\"\n  }), \"pytorch.org/get-started/cloud-partners\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tools that might help price EC2 instances:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://ec2instances.info/\"\n  }), \"ec2instances.info\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://ec2.shop\"\n  }), \"ec2.shop\"), \" (cleaner, but only for CPU instances)\")))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Colab"},{"depth":2,"value":"Kaggle"},{"depth":2,"value":"Simmons' machine"},{"depth":2,"value":"Resources"}]}},"pageContext":{"slug":"/setup/cloud/","prev":{"label":"Commandline basics","link":"/setup/basics"},"next":{"label":"DUlib","link":"/setup/dulib"},"githubEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/master/examples/gatsby-theme-docs/src/docs/setup/cloud.mdx"}},"staticQueryHashes":["1954253342","2360221584","2501019404","2679457992"]}