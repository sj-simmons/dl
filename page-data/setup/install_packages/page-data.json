{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/setup/install_packages/","result":{"data":{"mdx":{"id":"38724c5b-eb89-5df5-8a9e-abbb25f0432c","excerpt":"When installing software in a Unix-like operating system such as Ubuntu or MacOS,\nit is generally best to use your OS's native package manager, if possibleâ€¦","fields":{"slug":"/setup/install_packages/"},"frontmatter":{"title":"Best practice package management","description":null,"image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Best practice package management\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When installing software in a Unix-like operating system such as Ubuntu or MacOS,\\nit is generally best to use your OS's native package manager, if possible.\"), mdx(\"p\", null, \"Later we will need, for example, the standard image-processing library for\\nPython called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://scikit-image.org/\"\n  }), \"scikit-image\"), \".  According to the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://scikit-image.org/docs/stable/install.html\"\n  }), \"scikit-image installation\\npage\"), \" we should install the library\\nusing either \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"conda\"), \".  But on a Debian-based Linux system (such as\\nbare-metal Ubuntu or even in Ubuntu running the WSL), we are better off using\\nour system's package manager to install a correctly-versioned pre-built package.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"sudo apt install python3-skimage\\n\")), mdx(\"p\", null, \"Often, no such pre-built package is available; e.g., there is currently no\\npackage available for scikit-image via \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"brew\"), \" for macOS. So, on a Mac,\\nwe must use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip\"), \" to install scikit-image.\\nOutlining how to properly use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip\"), \" (including not using it,\\nif a pre-built binary is available) is the main goal of this\\ntutorial.\"), mdx(\"p\", null, \"Let us first install \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip\"), \" (as a pre-built binary).\\nOn a Debian-based system, such as Ubuntu, we can\\ninstall \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip\"), \" by issuing the following at the command prompt.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"sudo apt install python3-pip\\n\")), mdx(\"p\", null, \"On a Mac, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip\"), \" should have been installed when you installed\\nPython3. To install Python3 on a Mac, try:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"brew update && brew update python\\n\")), mdx(\"p\", null, \"Now, depending on the exact flavor of your system, the command \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pip\"), \"\\nmay or may not refer to the correct version; where by \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"correct\"), \", we mean\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip\"), \" for Python3, not for Python2. Currently, on many systems\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip\"), \" refers to the Python2 version and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip3\"), \" refers to the Python3\\nversion.\"), mdx(\"p\", null, \"If \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip3\"), \" is installed on your system, then it almost certainly\\nresides in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/usr/bin\"), \".  Let us check:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"/usr/bin/pip3 -V\\n\")), mdx(\"p\", null, \"If that command fails, then try\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"/usr/bin/pip -V\\n\")), mdx(\"p\", null, \"Here are those commands again along with their output when run on a\\nChromebook running Debian.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"/usr/bin/pip -V   # /bin/bash: /usr/bin/pip: No such file or directory\\n/usr/bin/pip3 -V  # pip 18.1 from /usr/lib/python3/dist-packages/pip (python 3.7)\\npython3 -V  # Python 3.7.3\\n\")), mdx(\"p\", null, \"This is good: there is no command called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pip\"), \", and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pip3\"), \" is installed and\\nrefers to Python3 version 3.7 which agrees with the version of Python3 installed\\non the system.\"), mdx(\"p\", null, \"On your system, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/usr/bin/pip\"), \" may refer to the Python3 version.  More likely,\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/usr/bin/pip3\"), \" is what you want.\"), mdx(\"p\", null, \"With the pip situation sorted out, we can finally install scikit-image:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"/usr/bin/pip3 install scikit-image\\n\")), mdx(\"p\", null, \"Note: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip\"), \", which stands for, recursively, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pip installs packages\"), \", and\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip3\"), \", both also install pre-built binaries.\"), mdx(\"p\", null, \"Tip: You can replace \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"python3\"), \" in the commands on this page with simply\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"python\"), \" if the latter points to Python3 (rather than Python2).\\nType \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python -V\"), \" to check this.\"), mdx(\"h2\", {\n    \"id\": \"using-pip\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#using-pip\",\n    \"aria-label\": \"using pip permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Using pip\"), mdx(\"p\", null, \"As we noted above, on a Unix-like operating system we are better off using, if\\npossible, our OS's package manager \", \"\\u2014\", \" for example, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"yum\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pacman\"), \",\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"apt\"), \" on a Debian-based system, or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"brew\"), \" on a Mac \", \"\\u2014\", \" to install\\nPython packages (or any software).\"), mdx(\"p\", null, \"In the event that the software we wish to install is not available\\nvia our OS's package manager, then we need an alternative.\\nBelow we discuss using, exclusively, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip\"), \" to install Python\\npackages.\"), mdx(\"p\", null, \"There are other Python package managers. Notably, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"conda\"), \" supports\\ninstalling and easily switching between different versions of a\\npackage, which results in faster and better testing and development\\nof packages.  But \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"conda\"), \" can be too complex for some users, and is\\ngenerally overkill when installing smaller packages.\"), mdx(\"p\", null, \"Currently, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip\"), \" is the de-facto packaging standard for\\nPython.  The vast majority of common Python packages can be installed\\nfrom \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip\"), \"'s primary source, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pypi.org\"\n  }), \"PyPI\"), \".\"), mdx(\"p\", null, \"Suppose that you want to install a Python package called\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"cool_package\"), \".  What should you do?\"), mdx(\"p\", null, \"First, try to install \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"cool_package\"), \" using your OS's package\\nmanager; e.g., on a Debian-based system such as Ubuntu:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo apt install cool_package\")), mdx(\"p\", null, \"or, on a Mac,\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"brew install cool_package\")), mdx(\"p\", null, \"Tips:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On a Debian-based system such as Ubuntu you can\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"list all packages available for installation via your OS's package\\nmanager with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"apt list\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dpkg --list\"), \". (So try\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"apt list | grep image\"), \" to list the packages that have \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"image\"), \" in\\ntheir name.)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"list all installed packages with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"apt list --installed\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dpkg --list | grep -v deinstall\"), \".\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Analagously, on a Mac, try:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"brew search\"), \" or have a look at \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://formulae.brew.sh/\"\n  }), \"formulae.brew.sh\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"brew list\"))))), mdx(\"p\", null, \"But what if the Python package \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"cool_package\"), \" is not provided by\\nyour OS's package manager? For example, Ubuntu and Debian do not\\nprovide \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"torch\"), \"?\"), mdx(\"p\", null, \"Well, if \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"cool_package\"), \" is available via\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pypi.org\"\n  }), \"PyPI\"), \", we can install it using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pip\"), \":\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/usr/bin/pip3 install cool_package\")), mdx(\"p\", null, \"Now, in practice, the command above will likely fail\\ndue to lack of permissions. Why?\"), mdx(\"p\", null, \"Pip first resolves any dependencies required by \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"cool_package\"), \"\\nand, if necessary, installs them; then it installs \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"cool_package\"), \".\\nThe command above leads to installing all of these packages system-wide,\\nin a directory such as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/usr/lib/python3/dist-packages\"), \".\"), mdx(\"p\", null, \"But users on your system (including you) typically do not have\\npermission to write to a system directory, hence the error.\\nSo what should you do?\"), mdx(\"p\", null, \"One option is to add \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sudo\"), \" to beginning of the command above and\\nrerun it. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"You likely don't want to do that\"), \", unless you have other\\nusers on your machine and wish to install a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"trusted\"), \" package system-wide\\n(so that it will be available to all users of your system).\"), mdx(\"p\", null, \"A better option is to add the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"user\"), \" option to the command above:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/usr/bin/pip3 install cool_package --user\")), mdx(\"p\", null, \"Adding the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"user\"), \" option causes \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip\"), \" to install the package in a\\nsubdirectory of your home directory; the subdirectory should be something\\nlike \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/home/your_user_name/.local/python3.7/site-packages\"), \".\"), mdx(\"p\", null, \"Tip: use the following command to get hints as to where \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pip\"), \" installs\\nthings.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"python3 -c \\\"import sys; print('\\\\n'.join(sys.path))\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"more-commands\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#more-commands\",\n    \"aria-label\": \"more commands permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"More commands\"), mdx(\"p\", null, \"You can\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"list the Python packages installed on your system\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"python3 -m pip list\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"search \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://pypi.org/\"\n  }), \"pypi.org\"), \" for Python packages with\", mdx(\"br\", {\n    parentName: \"li\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"python3 -m pip search cool_package\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"uninstall \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"cool_package\"), \" with\", mdx(\"br\", {\n    parentName: \"li\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"python3 -m pip uninstall cool_package\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"upgrade the package with\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"python3 -m pip install --upgrade cool_package\"), \".\")), mdx(\"p\", null, \"If you mess things up and start getting this error:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"Traceback (most recent call last):\\n File \\\"/usr/bin/pip3\\\", line 9, in <module>\\n     from pip import main\\n     ImportError: cannot import name 'main'\\n\")), mdx(\"p\", null, \"then try \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo python3 -m pip uninstall pip && sudo apt install python3-pip --reinstall\"), \".\"), mdx(\"h2\", {\n    \"id\": \"notes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#notes\",\n    \"aria-label\": \"notes permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Notes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The first command in the last section, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"python3 -m pip list\"), \", is\\na bit tricky. It lists packages that have been installed locally or\\nglobally in \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"either\"), \" your system-wide directory or your local user\\ndirectory \", \"\\u2014\", \" that is, in the directories output by\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"python3 -c \\\"import sys; print('\\\\n'.join(sys.path))\\\"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"One advantage to using your OS's package manager to install even\\nPython packages is that doing so helps keep your\\nsystem up-to-date: whenever you update your entire system\\n(with e.g., \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sudo apt update && sudo apt upgrade\"), \" on a\\nDebian-based system) all packages, including \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"cool_package\"), \", are\\nupgraded. Importantly, each package is upgraded in a way that\\ndoesn't break the dependencies of other installed packages.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You generally want to avoid using (\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"sudo\"), \" and) \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pip\"), \"\\nto install Python packages system-wide; instead, use the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"--user\"), \"\\nswitch (see above) to install in your local directory.  The issue is\\nthat your OS's package manager tries to keep track with the programs\\ntha are installed system-wide. That database can get corrupted, if\\nyou use \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pip\"), \" to install Python packages system-wide, leading to\\nproblems with future system upgrades, dependencies, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Similarly, you generally want to avoid using \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pip\"), \" to install a\\nnewer version of a Python package that you initially installed with\\nyour OS's package manager.\")), mdx(\"h2\", {\n    \"id\": \"takeaways\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#takeaways\",\n    \"aria-label\": \"takeaways permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Takeaways\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When installing software in your Unix-like environment, first\\ntry to install using your OS's package manager; e.g., \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sudo apt install ...\"), \"\\nor \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"brew install ...\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If your OS's package manager does not provide the Python package\\nyou want to install, then consider using \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pip\"), \" to install that package.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"But avoid using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sudo /usr/bin/pip3 install ...\"), \" when installing\\na Python package (unless you are a system admin and know what you\\nare doing).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Instead, use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/usr/bin/pip3 install --user ...\"), \".\")), mdx(\"h2\", {\n    \"id\": \"links\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#links\",\n    \"aria-label\": \"links permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Links\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://modelpredict.com/python-dependency-management-tools\"\n  }), \"Overview of Python dependency tools\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://glyph.twistedmatrix.com/2020/08/never-run-python-in-your-downloads-folder.html\"\n  }), \"Never run Python in your downloads folder\"))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Using pip"},{"depth":2,"value":"More commands"},{"depth":2,"value":"Notes"},{"depth":2,"value":"Takeaways"},{"depth":2,"value":"Links"}]}},"pageContext":{"slug":"/setup/install_packages/","prev":{"label":"Tooling","link":"/setup/overview"},"next":{"label":"Dev environment","link":"/setup/dev_environ"},"githubEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/master/examples/gatsby-theme-docs/src/docs/setup/install_packages.mdx"}},"staticQueryHashes":["1954253342","2360221584","2501019404","2679457992"]}